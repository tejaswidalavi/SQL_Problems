Que. 1 How can you optimize SQL queries for better performance?
Solution: 
	1. Indexing: Indexes contain all necessary information needed to access items quickly & efficiently . It speed up data retrieval process.
•	Create Indexes: Use indexes on columns that are frequently used in WHERE, JOIN, and ORDER BY clauses. This speeds up data retrieval.
•	Avoid Over-Indexing: Too many indexes can slow down INSERT, UPDATE, and DELETE operations. Balance is key.
    2. Query Structure
•	Use SELECT Only Necessary Columns: Instead of SELECT *, specify only the columns you need. This reduces the amount of data processed and transferred.
•	Limit Result Set: Use LIMIT to restrict the number of rows returned if you only need a subset of results.
3. WHERE Clause Optimization
•	Use Efficient Filters: Use conditions that can utilize indexes (e.g., equality checks). Avoid functions on indexed columns as they can negate the benefits of indexing.
•	Avoid NULL Comparisons: When possible, avoid using NULL in comparisons, as this can lead to performance issues.
4. JOIN Optimization
•	Use Appropriate JOINs: Ensure you're using the right type of join (INNER JOIN, LEFT JOIN, etc.) based on your needs. Reduce unnecessary joins.
•	Join on Indexed Columns: Ensure that the columns used for joining tables are indexed.
5. Subquery and CTE Optimization
•	Use Common Table Expressions (CTEs): They can simplify complex queries and improve readability. However, they may not always improve performance; test their impact.
•	Consider Inline Views: Sometimes, replacing CTEs with inline views can yield better performance.



Que. 2 How do you handle NULL values in SQL?
Solution:
        #   1stly Identify null values :
SELECT * FROM employees WHERE department IS NULL;
        
               # fill null values with some variable:
1)	Using Ifnull() function:
   e.g. SELECT name, IFNULL(department, 'Unknown') AS department 
           FROM employees;

2)	Using COALESCE() function: Syntax: COALESCE(expression1, expression2, ..., expressionN).
                                                 COALESCE() takes multiple arguments and returns the first non-NULL value from the list of expressions.
e.g. SELECT name, COALESCE(department, backup_department, 'Unknown') AS department FROM employees;

E.G.2)  Employee table:
name	primary_phone	secondary_phone	email
John Doe	NULL	555-1234	john@example.com
Jane Smith	555-5678	NULL	jane@example.com
Bob White	NULL	NULL	bob@example.com
Alice King	555-9999	555-8888	alice@example.com

      SELECT name, COALESCE(primary_phone, secondary_phone, email) AS contact_info FROM employees;


Result: 
name	contact_info
John Doe	555-1234
Jane Smith	555-5678
Bob White	bob@example.com
Alice King	555-9999


3)	Using Case statement:
e.g. SELECT name, 
                     CASE WHEN department IS NULL 
                     THEN 'No Department'
                     ELSE department
                     END AS department_status
                     FROM employees;







Q.3 Key Differences Between GROUP BY and PARTITION BY:

Ans: 
Group BY : Group by function used with Aggregate function to perform calculations on each group.
Partition BY :  PARTITION BY clause in SQL is used with window functions to divide the result set into partitions (or groups) and perform calculations across those partitions

Aspect	GROUP BY	PARTITION BY
Usage Context	Used in conjunction with aggregate functions.	Used with window functions (e.g., ROW_NUMBER(), RANK(), etc.).
Row Reduction	Reduces the number of rows, showing one row per group.	Does not reduce the number of rows; keeps all rows in the result.
Result Type	Aggregated result per group.	Computes windowed results for each partition while keeping original rows.
Typical Functions	COUNT(), SUM(), AVG(), MAX(), etc.	ROW_NUMBER(), RANK(), SUM() OVER(), etc.
Performance	Usually more expensive if the dataset is large because it collapses data into groups.	More efficient since it doesn’t reduce rows but partitions data for calculations.
Row Visibility	Only returns one row per group.	Keeps all rows visible and applies the window function within each partition.


e.g sales table:
Product	Sales_Amount
Laptop	1000
Phone	800
Laptop	1200
Tablet	500
Phone	900

Group by :

SELECT Product, SUM(Sales_Amount) FROM Sales GROUP BY Product :
Product	SUM(Sales_Amount)
Laptop	2200
Phone	1700
Tablet	500

Partition by: 

SELECT Product, Sales_Amount, SUM(Sales_Amount) OVER (PARTITION BY Product) AS Total_Sales FROM Sales;

Product	Sales_Amount	Total_Sales
Laptop	1000	2200
Laptop	1200	2200
Phone	800	1700
Phone	900	1700
Tablet	500	500

Summary:
•	Use GROUP BY when you want to aggregate data and reduce rows into groups.
•	Use PARTITION BY when you want to perform calculations within partitions without reducing the number of rows.





Que. 4. Find records in a table that are not present in another table.

Solution: 

 1. Using LEFT JOIN with WHERE NULL
This method involves using a LEFT JOIN to join two tables and then filtering the result where the joined table has NULL values (indicating no match).
Syntax:
SELECT  t1.* FROM Table1 t1
LEFT JOIN 
Table2 t2 
ON t1.common_column = t2.common_column
WHERE  t2.common_column IS NULL;

2.Using NOT IN
You can also use the NOT IN clause to find records in Table1 that do not exist in Table2.
Syntax:
SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Orders);

Que. 5 What is mean by Index & its types?

Def.: Indexes are special data structures used to speed up the retrieval of rows from a table. Indexes enhance query performance by providing a fast way to locate rows based on the values in one or more columns.




1. Purpose of Indexes: 
The primary purpose of an index is to improve the performance of data retrieval. Without indexes, SQL queries that involve searching for specific rows, sorting, or joining large tables would require a full table scan, which is inefficient. An index allows the database to find the desired rows more quickly, without scanning the entire table.

a) Single-Column Index
A single-column index is created on a single column in a table. It speeds up queries that filter on that column.

              Syntax:
              CREATE INDEX idx_employee_name ON Employees (name);

b) Composite Index (Multi-Column Index)
A composite index includes more than one column. It is useful when queries filter based on multiple columns.

Syntax:
CREATE INDEX idx_employee_dept ON Employees (department, name);

c) Unique Index
A unique index ensures that no duplicate values are allowed in the indexed column(s). It is often used to enforce uniqueness constraints.

Syntax:
CREATE UNIQUE INDEX idx_unique_email ON Employees (email);

 

 



Que. 6 What is the Order of execution in sql?

From >> where >> Group by >> Having >> select >> Order by >> Limit

Que. 7  What is mean by view in sql? 

Ans:

Views in SQL are a kind of virtual table. A view also has rows and columns like tables, but a view doesn’t store data on the disk like a table.
We can create a view by selecting fields from one or more tables present in the database. A View can either have all the rows of a table or specific rows based on certain conditions.

CREATE VIEW view_name
 AS SELECT column1, column2, ... 
FROM table_name 
WHERE condition;

Que. 8.  What can be done if Customers have done less transactions using Campaign?

Ans:
1.	Improve Customer Segmentation and Targeting:
•  Analyze customer data: Use your CRM to deeply analyze customer behavior, preferences, and purchasing history. Create more granular customer segments (e.g., high-value customers, frequent shoppers, dormant customers) to target them with more relevant offers.
•  Personalized campaigns: Personalize your messages, offers, and content to resonate with specific customer groups. Campaigns that address customer-specific needs or interests tend to have higher engagement.
•	Example: Segment customers who have shown interest in a particular product category and send them targeted offers on similar products.
2.	Analyze Campaign Performance:
Review campaign metrics: Assess click-through rates (CTR), conversion rates, and open rates to identify where the campaign is failing—whether it’s not reaching the right customers, the content is not engaging, or the offer isn't compelling enough.

3. Offer More Attractive Incentives
•	Exclusive discounts: Offer time-limited discounts or incentives to encourage immediate action.
•	Loyalty programs: Create a loyalty program or offer additional rewards for customers who make more transactions. For example, after every third purchase, offer a discount or a free product.
•	Referral programs: Implement a referral program where existing customers are incentivized to refer new customers, which can lead to a broader audience and higher transactions.

4. Enhance Campaign Timing
•	Frequency and timing: Ensure that campaigns are being sent at optimal times when customers are more likely to engage. For example, some customers may respond better to campaigns sent during weekends, or when they’re about to make regular purchases (such as the beginning or end of the month).
•	Avoid over-saturation: Sending too many campaigns can lead to customer fatigue. Focus on sending fewer, more targeted campaigns rather than flooding customers with constant messages.

6. Focus on Customer Engagement and Retention
•	Re-engagement campaigns: Target customers who haven’t transacted in a while with win-back campaigns offering special discounts or reactivation offers.
•	Content-driven campaigns: Not all campaigns should be promotional. Share valuable content (e.g., product tips, tutorials, behind-the-scenes videos) to keep customers engaged with your brand.
•	Survey and feedback requests: Ask for feedback from less active customers to understand why they haven’t transacted


Campaign Strategy:
1.	Segment dormant customers who haven’t transacted in the last 3 months.
2.	Send a personalized reactivation email with a special 20% discount offer.
3.	Run a remarketing campaign on social media targeting this same segment, showing ads related to the products they previously purchased or expressed interest in.
4.	Follow up with a survey asking for feedback about why they haven’t made recent transactions to understand barriers.




Que. 9 What is store procedure ? 

Ans: A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.
So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.



E.g. Let’s say you have a table called Employees, and you want to create a stored procedure that retrieves employee details based on their department

CREATE PROCEDURE GetEmployeesByDepartment
 @DepartmentName VARCHAR(50)
 AS
 BEGIN

 SELECT EmployeeID, FirstName, LastName, Salary 
FROM Employees 
WHERE Department = @DepartmentName; 

END;


Que. 10 Differences Between Window Functions and Aggregate Functions:

Window functions in SQL perform calculations across a set of table rows that are related to the current row. Unlike aggregate functions, which return a single result per group, window functions return a result for each row while considering other rows in the dataset.

Notes :  Whenever You want to apply filter on Aggregated value use Having clause. Where clause is applied on each individual rows .


Que. What is the difference between Union & Union All?
Sol.: 
Union All gives all records including duplicates. Union will give unique records

Que. How to decide which campaign perform well. Their metrics. Conversion rate of SMS & WA


## Que. 11 What are window functions, and how are they different from aggregate functions?


Answer:

a. Window functions compute values across a subset of rows related to the current row (e.g., ROW_NUMBER, RANK).

b. Aggregate functions summarize values for groups of rows but collapse results into single output rows.

Example:

SELECT name, salary,

RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS rank_in_dept FROM employees;



Que. 12   Below are Imp Concepts in SQL:


👉 𝗗𝗶𝗳𝗳𝗲𝗿𝗲𝗻𝗰𝗲 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝗪𝗛𝗘𝗥𝗘 𝗔𝗡𝗗 𝗛𝗔𝗩𝗜𝗡𝗚: The WHERE clause is used to filter rows from the result set before any groupings are performed. The HAVING clause is used to filter rows from the result set after groups have been created by the GROUP BY clause.

👉𝗣𝗶𝘃𝗼𝘁𝗶𝗻𝗴 𝗱𝗮𝘁𝗮 𝗮𝗻𝗱 𝗨𝗻𝗽𝗶𝘃𝗼𝘁𝗶𝗻𝗴 𝗱𝗮𝘁𝗮: Pivoting data involves rotating rows into columns, typically to aggregate values and create a summary report. It's useful when the data is stored in a normalized form. Unpivoting data involves rotating columns into rows, typically to normalize data. 

 👉𝗥𝘂𝗻𝗻𝗶𝗻𝗴 𝗦𝘂𝗺: Calculating the cumulative sum of a certain amount or expenditure over time. This cumulative sum represents the total amount incurred up to a particular point in time, often referred to as the running total or running sum. 

👉 𝗗𝗶𝗳𝗳𝗲𝗿𝗲𝗻𝗰𝗲 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝗖𝗼𝘂𝗻𝘁(*) 𝗮𝗻𝗱 𝗖𝗼𝘂𝗻𝘁(𝗰𝗼𝗹𝘂𝗺𝗻_𝗻𝗮𝗺𝗲): COUNT(*) counts the total number of rows in the result set, regardless of the presence of NULL values in any column.Count(column_name) also counts the total number of rows excluding Null values in the result set.









 How will you be able to know actual need, impact and feasibility of a particular certain change request or implementation in an application ?
1) What is the difference between SQL and PL/SQL?
2) How would you handle missing or inconsistent data in a dataset?
3) What is normalization, and why is it important in databases?
4) Explain the difference between INNER JOIN and OUTER JOIN.
5) What’s the difference between a clustered and a non-clustered index?
6) How would you handle outliers in your data?
7) Can you explain the difference between correlation and covariance?
8) What is a pivot table, and when would you use it?
9) What are some key performance metrics (KPIs) you would track as a data analyst?
10) How would you explain a complex analysis to someone without a technical background?  
11) How can you optimize SQL queries for better performance?
12. Write a query to fetch top 5 employees having highest salary?
13. Write a query to find 2nd highest salary from employee table?
14. Difference between Rank function & Dense Rank function in SQL?
15.How can you optimize a SQL query?
16. What is Indexes?
17.Difference b/w Delete Drop and truncate.
18. Difference b/w Rank, Rownum, denserank
19. How to delete duplicate records 
20. Types of joins and they will give you two tables And perform join operations
21. Difference b/w store procedure and function.
22. 2nd/3rd highest salary( using window fn and subquery)
23. Difference b/w Union and Union all
24. Views and Types of Views


